schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Channel {
  name: String
  emmissionWavelength: Float
  excitationWavelength: Float
  acquisitionMode: String
  color: String
}

input ChannelInput {
  name: String
  emmissionWavelength: Float
  excitationWavelength: Float
  acquisitionMode: String
  color: String
}

type Column {
  name: String
  fieldName: String
  pandasType: String
  numpyType: String
  metadata: GenericScalar
}

scalar DataFrame

scalar DateTime

type DeleteExperimentResult {
  id: String
}

type DeleteOmeroFileResult {
  id: String
}

type DeleteROIResult {
  id: String
}

type DeleteRepresentationResult {
  id: String
}

type DeleteSampleResult {
  id: String
}

type DeleteTableResult {
  id: String
}

type Experiment {
  id: ID!
  meta: GenericScalar
  name: String!
  description: String
  descriptionLong: String
  linkedPaper: String
  image: String
  createdAt: DateTime!
  creator: User
  tags: [String]
  samples(creator: ID, experiments: [ID], bioseries: String, name: String, ids: [ID], representations: [ID], order: [String], limit: Int, offset: Int): [Sample]
  metrics: [Metric!]!
  tables: [Table!]!
}

type ExperimentsEvent {
  deleted: ID
  update: Experiment
  create: Experiment
}

scalar File

scalar GenericScalar

scalar ImageFile

input InputVector {
  x: Float
  y: Float
  z: Float
}

type Metric {
  id: ID!
  rep: Representation
  experiment: Experiment
  sample: Sample
  key: String!
  value: GenericScalar
  createdAt: DateTime!
  creator: User
}

type Mutation {
  createExperiment(creator: String, description: String, meta: GenericScalar, name: String!, tags: [String]): Experiment
  deleteExperiment(id: ID!): DeleteExperimentResult
  createSample(creator: String, experiments: [ID], meta: GenericScalar, name: String, tags: [String]): Sample
  deleteSample(id: ID!): DeleteSampleResult
  updateRepresentation(rep: ID!): Representation
  createRepresentation(array: XArray, creator: String, meta: GenericScalar, name: String, omero: OmeroRepresentationInput, origins: [ID], sample: ID, tags: [String], variety: RepresentationVarietyInput): Representation
  deleteRepresentation(id: ID!): DeleteRepresentationResult
  fromXArray(creator: String, meta: GenericScalar, name: String, omero: OmeroRepresentationInput, origins: [ID], sample: ID, tags: [String], variety: RepresentationVarietyInput, xarray: XArray!): Representation
  createMetric(creator: String, experiment: ID, key: String!, rep: ID, sample: ID, value: GenericScalar!): Metric
  uploadThumbnail(file: ImageFile!, rep: ID!): Thumbnail
  uploadOmeroFile(file: Upload!): OmeroFile
  deleteOmeroFile(id: ID!): DeleteOmeroFileResult
  negotiate(additionals: GenericScalar, internal: Boolean): GenericScalar
  createROI(creator: ID, meta: GenericScalar, representation: ID!, tags: [String], type: RoiTypeInput!, vectors: [InputVector]!): ROI
  deleteROI(id: ID!): DeleteROIResult
  updateTable(id: ID!): Table
  createTable(columns: [String], creator: String, experiment: ID, name: String, representation: ID, sample: ID, tags: [String]): Table
  fromDf(creator: String, df: DataFrame!, experiment: ID, name: String, representation: ID, sample: ID, tags: [String]): Table
  deleteTable(id: ID!): DeleteTableResult
}

type OmeroFile {
  id: ID!
  type: OmeroFileType!
  file: File
  name: String!
  createdAt: DateTime!
  creator: User
  thumbnail: String
}

enum OmeroFileType {
  TIFF
  JPEG
  MSR
  CZI
  UNKNOWN
}

type OmeroRepresentation {
  planes: [Plane]
  channels: [Channel]
  physicalSize: PhysicalSize
  scale: [Float]
}

input OmeroRepresentationInput {
  planes: [PlaneInput]
  channels: [ChannelInput]
  physicalSize: PhysicalSizeInput
  scale: [Float]
}

type PhysicalSize {
  x: Int
  y: Int
  z: Int
  t: Int
  c: Int
}

input PhysicalSizeInput {
  x: Int
  y: Int
  z: Int
  t: Int
  c: Int
}

type Plane {
  zIndex: Int
  yIndex: Int
  xIndex: Int
  cIndex: Int
  tIndex: Int
  exposureTime: Float
  deltaT: Float
}

input PlaneInput {
  zIndex: Int
  yIndex: Int
  xIndex: Int
  cIndex: Int
  tIndex: Int
  exposureTime: Float
  deltaT: Float
}

type Query {
  hello: String
  void: String
  experiments(name: String, creator: Float, tags: [String], limit: Int, offset: Int): [Experiment]
  experiment(id: ID!): Experiment
  myexperiments(name: String, creator: Float, tags: [String], limit: Int, offset: Int): [Experiment]
  metric(id: ID!): Metric
  metrics(keys: [String], sample: ID, experiment: ID, representation: ID, order: [String], limit: Int, offset: Int): [Metric]
  omerofile(id: ID!): OmeroFile
  myomerofiles(name: String, limit: Int, offset: Int): [OmeroFile]
  omerofiles(name: String, limit: Int, offset: Int): [OmeroFile]
  myrepresentations(name: String, tags: [String], ids: [String], experiments: [ID], samples: [ID], ordering: String, hasMetric: String, order: [String], variety: RepresentationVarietyInput, forceThumbnail: Boolean, createdAfter: DateTime, createdBefore: DateTime, derivedTags: [String], limit: Int, offset: Int): [Representation]
  representation(id: ID!): Representation
  randomRepresentation: Representation
  representations(name: String, tags: [String], ids: [String], experiments: [ID], samples: [ID], ordering: String, hasMetric: String, order: [String], variety: RepresentationVarietyInput, forceThumbnail: Boolean, createdAfter: DateTime, createdBefore: DateTime, derivedTags: [String], limit: Int, offset: Int): [Representation]
  sample(id: ID!): Sample
  samples(creator: ID, experiments: [ID], bioseries: String, name: String, ids: [ID], representations: [ID], order: [String], limit: Int, offset: Int): [Sample]
  mysamples(creator: ID, experiments: [ID], bioseries: String, name: String, ids: [ID], representations: [ID], order: [String], limit: Int, offset: Int): [Sample]
  tags(name: String, limit: Int, offset: Int): [Tag]
  thumbnail(id: ID!): Thumbnail
  rois(representation: ID, creator: Float, tags: [String], type: [RoiTypeInput], limit: Int, offset: Int): [ROI]
  tables: [Table]
  mytables: [Table]
  table(id: ID!): Table
}

type ROI {
  id: ID!
  nodeid: String
  creator: User!
  vectors: [Vector]
  type: ROIType!
  color: String
  signature: String
  createdAt: DateTime!
  representation: Representation
  tags: [String]
}

enum ROIType {
  ELLIPSE
  POLYGON
  LINE
  RECTANGLE
  PATH
  UNKNOWN
}

type Representation {
  id: ID!
  store: Store
  shape: [Int!]
  dims: [String!]
  hasArray: Boolean!
  name: String
  unique: UUID!
  fileversion: String!
  meta: GenericScalar
  omero: OmeroRepresentation
  origins: [Representation!]!
  sample: Sample
  type: String
  variety: RepresentationVariety!
  chain: String
  nodeid: String
  createdAt: DateTime!
  creator: User
  tags: [String]
  derived(name: String, tags: [String], ids: [String], experiments: [ID], samples: [ID], ordering: String, hasMetric: String, order: [String], variety: RepresentationVarietyInput, forceThumbnail: Boolean, createdAfter: DateTime, createdBefore: DateTime, derivedTags: [String], limit: Int, offset: Int): [Representation]
  metrics(keys: [String], sample: ID, experiment: ID, representation: ID, order: [String], limit: Int, offset: Int): [Metric]
  thumbnails: [Thumbnail!]!
  rois: [ROI!]!
  tables(name: String, tags: [String], limit: Int, offset: Int): [Table]
  latestThumbnail: Thumbnail
}

type RepresentationEvent {
  deleted: ID
  update: Representation
  create: Representation
}

enum RepresentationVariety {
  MASK
  VOXEL
  RGB
  UNKNOWN
}

enum RepresentationVarietyInput {
  MASK
  VOXEL
  RGB
  UNKNOWN
}

type RoiEvent {
  delete: ID
  update: ROI
  create: ROI
}

enum RoiTypeInput {
  ELLIPSIS
  POLYGON
  LINE
  RECTANGLE
  PATH
  UNKNOWN
}

type Sample {
  id: ID!
  meta: GenericScalar
  name: String!
  experiments: [Experiment!]!
  nodeid: String
  createdAt: DateTime!
  creator: User
  tags: [String]
  representations(name: String, tags: [String], ids: [String], experiments: [ID], samples: [ID], ordering: String, hasMetric: String, order: [String], variety: RepresentationVarietyInput, forceThumbnail: Boolean, createdAfter: DateTime, createdBefore: DateTime, derivedTags: [String], limit: Int, offset: Int): [Representation]
  metrics: [Metric!]!
  tables: [Table!]!
}

type SamplesEvent {
  deleted: ID
  update: Sample
  create: Sample
}

scalar Store

type Subscription {
  myRepresentations: RepresentationEvent
  myExperiments: ExperimentsEvent
  mySamples: SamplesEvent
  myTables: TablesEvent
  rois(representation: ID!): RoiEvent
}

type Table {
  id: ID!
  representation: Representation
  sample: Sample
  experiment: Experiment
  name: String!
  columns: [Column]
  store: String
  createdAt: DateTime!
  creator: User
  tags: [String]
  query(columns: [String], offset: Int, limit: Int): [[GenericScalar]]
}

type TablesEvent {
  deleted: ID
  update: Table
  create: Table
}

type Tag {
  id: ID!
  name: String!
  slug: String!
}

type Thumbnail {
  id: ID!
  representation: Representation!
  image: String
}

scalar UUID

scalar Upload

type User {
  id: ID!
  password: String!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  email: String!
  roles: GenericScalar
  experimentSet: [Experiment!]!
  omerofileSet: [OmeroFile!]!
  sampleSet: [Sample!]!
  representationSet: [Representation!]!
  metricSet: [Metric!]!
  roiSet: [ROI!]!
  tableSet: [Table!]!
  color: String
}

type Vector {
  x: Float
  y: Float
  z: Float
}

scalar XArray
