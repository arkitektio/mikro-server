# Generated by Django 3.2.16 on 2023-01-19 16:59

import colorfield.fields
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import grunnlag.models
import grunnlag.storage
import matrise.fields
import matrise.storages.s3
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0005_auto_20220424_2025'),
        ('lok', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('age', models.CharField(max_length=400)),
                ('type', models.CharField(max_length=500)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='animal_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='animal_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Context',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the context', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time the context was created')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='context_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='context_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, help_text='The user that created the context', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the experiment', max_length=200)),
                ('description', models.CharField(blank=True, help_text='A short description of the experiment', max_length=1000, null=True)),
                ('description_long', models.TextField(blank=True, help_text='A long description of the experiment', null=True)),
                ('linked_paper', models.URLField(blank=True, help_text='A link to a paper describing the experiment', null=True)),
                ('image', models.ImageField(blank=True, help_text='An image to be used as a banner for the experiment', null=True, upload_to='experiment_banner')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time the experiment was created')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experiment_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experiment_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, help_text='The user that created the experiment', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that have pinned the experiment', related_name='pinned_experiments', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='Tags for the experiment', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentalGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The experimental groups name', max_length=200)),
                ('description', models.CharField(help_text='A brief summary of applied techniques in this group', max_length=1000)),
                ('iscontrol', models.BooleanField(help_text='Is this Experimental Group a ControlGroup?')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experimentalgroup_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experimentalgroup_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experiment', models.ForeignKey(help_text='The experiment this Group belongs too', on_delete=django.db.models.deletion.CASCADE, to='grunnlag.experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000, unique=True)),
                ('detectors', models.JSONField(blank=True, default=list, null=True)),
                ('dichroics', models.JSONField(blank=True, default=list, null=True)),
                ('filters', models.JSONField(blank=True, default=list, null=True)),
                ('lot_number', models.CharField(blank=True, max_length=1000, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=1000, null=True)),
                ('model', models.CharField(blank=True, max_length=1000, null=True)),
                ('serial_number', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='instrument_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='instrument_created_through', to='lok.lokclient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=1000, unique=True)),
                ('name', models.CharField(max_length=1000, unique=True)),
                ('magnification', models.FloatField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='objective_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='objective_created_through', to='lok.lokclient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OmeroFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('TIFF', 'Tiff'), ('JPEG', 'Jpeg'), ('MSR', 'MSR File'), ('CZI', 'Zeiss Microscopy File'), ('UNKNOWN', 'Unwknon File Format')], default='UNKNOWN', help_text='The type of the file', max_length=400)),
                ('file', grunnlag.models.OmeroFileField(blank=True, help_text='The file', null=True, storage=grunnlag.storage.PrivateMediaStorage(), upload_to='files')),
                ('name', models.CharField(help_text='The name of the file', max_length=400)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time the file was created')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='omerofile_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='omerofile_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, help_text='The user that created/uploaded the file', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experiments', models.ManyToManyField(blank=True, help_text='The experiment this file belongs to', null=True, related_name='omero_files', to='grunnlag.Experiment')),
                ('tags', taggit.managers.TaggableManager(help_text='Tags for the file', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Representation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store', matrise.fields.StoreField(blank=True, help_text='The location of the Array on the Storage System (S3 or Media-URL)', null=True, storage=matrise.storages.s3.S3Storage(), upload_to='zarr', verbose_name='store')),
                ('shape', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, help_text='The arrays shape', null=True, size=None)),
                ('dims', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, help_text='The arrays dimension', null=True, size=None)),
                ('has_array', models.BooleanField(default=False, help_text='Does this Model have attached Data?', verbose_name='has_array')),
                ('name', models.CharField(blank=True, help_text='Cleartext name', max_length=1000, null=True)),
                ('unique', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this array')),
                ('fileversion', models.CharField(default='0.1', help_text='The File Version of this Array', max_length=1000)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('variety', models.CharField(choices=[('MASK', 'Mask (Value represent Labels)'), ('VOXEL', 'Voxel (Value represent Intensity)'), ('RGB', 'RGB (First three channel represent RGB)'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', help_text='The Representation can have vasrying types, consult your API', max_length=400)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='representation_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='representation_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=models.SET(grunnlag.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('experiments', models.ManyToManyField(blank=True, help_text='The experiments this image belongs to', null=True, related_name='experiments', to='grunnlag.Experiment')),
                ('file_origins', models.ManyToManyField(blank=True, null=True, related_name='derived_representations', related_query_name='derived_representations', to='grunnlag.OmeroFile')),
                ('origins', models.ManyToManyField(blank=True, null=True, related_name='derived', related_query_name='derived', to='grunnlag.Representation')),
                ('pinned_by', models.ManyToManyField(help_text='The users that have pinned the representation', related_name='pinned_representations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('download_representation', 'Can download Presentation')],
            },
        ),
        migrations.CreateModel(
            name='UserMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=18, samples=None)),
                ('user', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='meta', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Thumbnail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blurhash', models.CharField(blank=True, max_length=1000, null=True)),
                ('image', models.ImageField(null=True, storage=grunnlag.storage.PrivateMediaStorage(), upload_to='thumbnails')),
                ('major_color', models.CharField(blank=True, max_length=100, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='thumbnail_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='thumbnail_created_through', to='lok.lokclient')),
                ('representation', models.ForeignKey(help_text='The Sample this representation belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='thumbnails', to='grunnlag.representation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the stage', max_length=1000)),
                ('kind', models.CharField(max_length=1000)),
                ('physical_size', models.JSONField(default=[], help_text='The physical size of a position vector unit in micrometer')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time the acquistion was created')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stage_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stage_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, help_text='The user that created the stage', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('instrument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='grunnlag.instrument')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that have pinned the stage', related_name='pinned_acquistions', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(help_text='The name of the sample', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time the sample was created')),
                ('animal', models.ForeignKey(blank=True, help_text='The animal this sample belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='grunnlag.animal')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sample_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sample_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, help_text='The user that created the sample', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experimentalgroup', models.ForeignKey(blank=True, help_text='The experimental group this sample belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='grunnlag.experimentalgroup')),
                ('experiments', models.ManyToManyField(blank=True, help_text='The experiments this sample belongs to', null=True, related_name='samples', to='grunnlag.Experiment')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that have pinned the sample', related_name='pinned_samples', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ROI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vectors', models.JSONField(default=list, help_text='A list of the ROI Vectors (specific for each type)', max_length=3000)),
                ('type', models.CharField(choices=[('ellipse', 'Ellipse'), ('polygon', 'POLYGON'), ('line', 'Line'), ('rectangle', 'Rectangle'), ('path', 'Path'), ('unknown', 'Unknown'), ('frame', 'Frame'), ('slice', 'Slice'), ('point', 'Point')], default='unknown', help_text='The Roi can have varying types, consult your API', max_length=400)),
                ('color', models.CharField(blank=True, help_text='The color of the ROI (for UI)', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now=True, help_text='The time the ROI was created')),
                ('label', models.CharField(blank=True, help_text='The label of the ROI (for UI)', max_length=1000, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roi_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roi_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(help_text='The user that created the ROI', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experimentalgroup', models.ForeignKey(blank=True, help_text='The ExperimentalGroup this ROI belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='grunnlag.experimentalgroup')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that pinned this ROI', related_name='pinned_rois', to=settings.AUTH_USER_MODEL)),
                ('representation', models.ForeignKey(blank=True, help_text='The Representation this ROI was original used to create (drawn on)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rois', to='grunnlag.representation')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='representation',
            name='roi_origins',
            field=models.ManyToManyField(blank=True, null=True, related_name='derived_representations', related_query_name='derived_representations', to='grunnlag.ROI'),
        ),
        migrations.AddField(
            model_name='representation',
            name='sample',
            field=models.ForeignKey(blank=True, help_text='The Sample this representation belosngs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='representations', to='grunnlag.sample'),
        ),
        migrations.AddField(
            model_name='representation',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the possition', max_length=1000)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('z', models.FloatField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='position_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='position_created_through', to='lok.lokclient')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that have pinned the position', related_name='pinned_positions', to=settings.AUTH_USER_MODEL)),
                ('stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='grunnlag.stage')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'permissions': [('download_representation', 'Can download Presentation')],
            },
        ),
        migrations.CreateModel(
            name='Omero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planes', models.JSONField(blank=True, default=list, null=True)),
                ('channels', models.JSONField(blank=True, default=list, null=True)),
                ('scale', models.JSONField(blank=True, default=list, null=True)),
                ('physical_size', models.JSONField(blank=True, default=list, null=True)),
                ('acquisition_date', models.DateTimeField(blank=True, null=True)),
                ('objective_settings', models.JSONField(blank=True, default=dict, null=True)),
                ('imaging_environment', models.JSONField(blank=True, default=dict, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='omero_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='omero_created_through', to='lok.lokclient')),
                ('instrument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='omeros', to='grunnlag.instrument')),
                ('objective', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='omeros', to='grunnlag.objective')),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='omeros', to='grunnlag.position')),
                ('representation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='omero', to='grunnlag.representation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(help_text='The kind of the model (e.g. Pytorch, Tensorflow, etc.)', max_length=400)),
                ('data', grunnlag.models.ModelDataField(blank=True, help_text='The model', null=True, storage=grunnlag.storage.PrivateMediaStorage(), upload_to='models')),
                ('name', models.CharField(help_text='The name of the model', max_length=400)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time the file was created')),
                ('contexts', models.ManyToManyField(blank=True, help_text='The contexts this model is valid for', null=True, related_name='models', to='grunnlag.Context')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='model_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='model_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, help_text='The user that created/uploaded the file', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experiments', models.ManyToManyField(blank=True, help_text='The experiment this model belongs to', null=True, related_name='models', to='grunnlag.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='The Key', max_length=1000)),
                ('value', models.JSONField(blank=True, help_text='The value', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metric_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metric_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experiment', models.ForeignKey(blank=True, help_text='The Representatoin this Metric belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='grunnlag.experiment')),
                ('representation', models.ForeignKey(blank=True, help_text='The Representatoin this Metric belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='grunnlag.representation')),
                ('sample', models.ForeignKey(blank=True, help_text='The Sample this Metric belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='grunnlag.sample')),
            ],
            options={
                'permissions': [('download_representation', 'Can download Presentation')],
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instance', models.BigIntegerField(help_text='The instance value of the representation (pixel value). Must be a value of the image array')),
                ('name', models.CharField(blank=True, help_text='The name of the instance', max_length=600, null=True)),
                ('created_at', models.DateTimeField(auto_now=True, help_text='The time the Label was created')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='label_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='label_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(help_text='The user that created the Label', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experimentalgroup', models.ForeignKey(blank=True, help_text='The Experimental group this Label belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='grunnlag.experimentalgroup')),
                ('pinned_by', models.ManyToManyField(help_text='The users that pinned this Label', related_name='pinned_labels', to=settings.AUTH_USER_MODEL)),
                ('representation', models.ForeignKey(blank=True, help_text='The Representation this Label instance belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='grunnlag.representation')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.AddField(
            model_name='instrument',
            name='objectives',
            field=models.ManyToManyField(blank=True, related_name='instruments', to='grunnlag.Objective'),
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='The key of the feature', max_length=1000)),
                ('value', models.JSONField(blank=True, help_text='The value of the feature', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feature_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feature_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, help_text='The user that created the Feature', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('label', models.ForeignKey(blank=True, help_text='The Label this Feature belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='features', to='grunnlag.label')),
            ],
        ),
        migrations.CreateModel(
            name='DataLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x_id', models.PositiveIntegerField()),
                ('y_id', models.PositiveIntegerField()),
                ('relation', models.CharField(help_text='The relation between the two objects', max_length=1000)),
                ('left_type', models.CharField(help_text='The type of the left object', max_length=1000)),
                ('right_type', models.CharField(help_text='The type of the right object', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time the sample was created')),
                ('context', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='grunnlag.context')),
                ('creator', models.ForeignKey(blank=True, help_text='The user that created the sample', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('x_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='x_content_type', to='contenttypes.contenttype')),
                ('y_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='y_content_type', to='contenttypes.contenttype')),
            ],
            options={
                'permissions': [('can_link', 'Can link objects')],
            },
        ),
        migrations.AddField(
            model_name='context',
            name='experiment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contexts', to='grunnlag.experiment'),
        ),
        migrations.AddField(
            model_name='context',
            name='pinned_by',
            field=models.ManyToManyField(blank=True, help_text='The users that have pinned the context', related_name='pinned_contexts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='context',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='Tags for the context', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Antibody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='antibody_created_by', to=settings.AUTH_USER_MODEL)),
                ('created_through', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='antibody_created_through', to='lok.lokclient')),
                ('creator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='animal',
            name='experiment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='grunnlag.experiment'),
        ),
        migrations.AddField(
            model_name='animal',
            name='experimentalgroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='grunnlag.experimentalgroup'),
        ),
        migrations.AddConstraint(
            model_name='position',
            constraint=models.UniqueConstraint(fields=('stage', 'x', 'y', 'z'), name='Only one unique posistion per stage'),
        ),
        migrations.AddConstraint(
            model_name='metric',
            constraint=models.UniqueConstraint(fields=('key', 'sample'), name='Only one unique key per sample'),
        ),
        migrations.AddConstraint(
            model_name='label',
            constraint=models.UniqueConstraint(fields=('instance', 'representation'), name='Only one unique label per images'),
        ),
        migrations.AddConstraint(
            model_name='feature',
            constraint=models.UniqueConstraint(fields=('key', 'label'), name='Only one unique key per label'),
        ),
        migrations.AddConstraint(
            model_name='datalink',
            constraint=models.UniqueConstraint(fields=('x_content_type', 'x_id', 'y_content_type', 'y_id', 'relation', 'context'), name='Only one relationship of the same kind between two objects in the same context'),
        ),
    ]
