# Generated by Django 3.2.8 on 2021-11-01 09:51

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import grunnlag.models
import grunnlag.storage
import matrise.fields
import matrise.storages.s3
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('age', models.CharField(max_length=400)),
                ('type', models.CharField(max_length=500)),
                ('creator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('description_long', models.TextField(blank=True, null=True)),
                ('linked_paper', models.URLField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='experiment_banner')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentalGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The experimental groups name', max_length=200)),
                ('description', models.CharField(help_text='A brief summary of applied techniques in this group', max_length=1000)),
                ('iscontrol', models.BooleanField(help_text='Is this Experimental Group a ControlGroup?')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experiment', models.ForeignKey(help_text='The experiment this Group belongs too', on_delete=django.db.models.deletion.CASCADE, to='grunnlag.experiment')),
            ],
        ),
        migrations.CreateModel(
            name='Representation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store', matrise.fields.StoreField(blank=True, help_text='The location of the Array on the Storage System (S3 or Media-URL)', null=True, storage=matrise.storages.s3.S3Storage(), upload_to='zarr', verbose_name='store')),
                ('shape', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, help_text='The arrays shape', null=True, size=None)),
                ('dims', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, help_text='The arrays dimension', null=True, size=None)),
                ('has_array', models.BooleanField(default=False, help_text='Does this Model have attached Data?', verbose_name='has_array')),
                ('name', models.CharField(blank=True, help_text='Cleartext name', max_length=1000, null=True)),
                ('unique', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this array')),
                ('fileversion', models.CharField(default='0.1', help_text='The File Version of this Array', max_length=1000)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('type', models.CharField(blank=True, help_text='The Representation can have varying types, consult your API', max_length=400, null=True)),
                ('variety', models.CharField(choices=[('MASK', 'Mask (Value represent Labels)'), ('VOXEL', 'Voxel (Value represent Intensity)'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', help_text='The Representation can have varying types, consult your API', max_length=400)),
                ('chain', models.CharField(blank=True, max_length=9000, null=True)),
                ('nodeid', models.CharField(blank=True, max_length=400, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, storage=grunnlag.storage.PrivateMediaStorage(), upload_to='thumbnails')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=models.SET(grunnlag.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('origin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='derived', related_query_name='derived', to='grunnlag.representation')),
            ],
            options={
                'permissions': [('download_representation', 'Can download Presentation')],
            },
        ),
        migrations.CreateModel(
            name='Thumbnail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(null=True, upload_to='thumbnails')),
                ('representation', models.ForeignKey(help_text='The Sample this representation belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='thumbnails', to='grunnlag.representation')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=1000)),
                ('nodeid', models.CharField(blank=True, max_length=400, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('animal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='grunnlag.animal')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experimentalgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='grunnlag.experimentalgroup')),
                ('experiments', models.ManyToManyField(blank=True, null=True, related_name='samples', to='grunnlag.Experiment')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='ROI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nodeid', models.CharField(blank=True, max_length=400, null=True)),
                ('vectors', models.CharField(help_text='A json dump of the ROI Vectors (specific for each type)', max_length=3000)),
                ('color', models.CharField(blank=True, max_length=100, null=True)),
                ('signature', models.CharField(blank=True, max_length=300, null=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experimentalgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='grunnlag.experimentalgroup')),
                ('representation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rois', to='grunnlag.representation')),
            ],
        ),
        migrations.CreateModel(
            name='RepresentationMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='The Key', max_length=1000)),
                ('value', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('rep', models.ForeignKey(help_text='The Representatoin this Metric belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='grunnlag.representation')),
            ],
        ),
        migrations.AddField(
            model_name='representation',
            name='sample',
            field=models.ForeignKey(blank=True, help_text='The Sample this representation belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='representations', to='grunnlag.sample'),
        ),
        migrations.AddField(
            model_name='representation',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Antibody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('creator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='animal',
            name='experiment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='grunnlag.experiment'),
        ),
        migrations.AddField(
            model_name='animal',
            name='experimentalgroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='grunnlag.experimentalgroup'),
        ),
    ]
